#include "iddraw.h"
#include "hook/etc.h"
#include "hook/hook.h"
#include "MultiGameWeaponID.h"
#include "tamem.h"
#include "tafunctions.h"

/*
projectile
bug 2 0499B02  24 ~
bug 4 049DFEC  24 ~

bug 3 049D27B  24 ~~
bug 9 049D7E5  24  ~~
bug 10 49DAD8  24 ~~
bug 11 049DCAB 24 ~~
bug 12 49DE6D  24 ~~

AOD
bug 6 049A78C  0e ~~
bug 7 049A7CD  0e ~~
bug 8 049AFCB  0e ~~

wpn packet size
bug 14 0452117 ~
*/


BYTE Receive_Weapon_bits[]= {0x8B, 0x50, 0x24};
BYTE AreaOfDamage_bits[]= 
{
	0x6A, 0x11, 0x8B, 0x11, 0x89, 0x54, 0x24, 0x59, 0x8B, 0x16, 0x8B, 0x41, 0x04, 0x8B, 0x75, 0x08, 0x89, 0x44, 0x24, 0x5D, 0x8B, 0x49, 0x08, 0x89, 0x4C, 0x24, 0x61, 0x8B, 0x82, 0xBC, 0x00, 0x00,
	0x00, 0x8B, 0x56, 0x52, 0x89, 0x44, 0x24, 0x65, 0x8D, 0x4C, 0x24, 0x58, 0x8B, 0x82, 0x96, 0x00, 0x00, 0x00, 0x51, 0x8B, 0x48, 0x04, 0x51, 0xE8, 0x43, 0x76, 0xFB, 0xFF, 0x8D, 0x56, 0x28, 0xC6,
	0x44, 0x24, 0x54, 0x0E, 0x6A, 0x11, 0x8B, 0x02, 0x89, 0x44, 0x24, 0x59, 0x8B, 0x06, 0x8B, 0x4A, 0x04, 0x89, 0x4C, 0x24, 0x5D, 0x8B, 0x52, 0x08, 0x89, 0x54, 0x24, 0x61, 0x8B, 0x80, 0xBC, 0x00,
	0x00, 0x00, 0x8B, 0x46, 0x52, 0x89, 0x4C, 0x24, 0x65
};
BYTE Receive_AreaOfDamage_bits[]=
{
	0x8B, 0x9B, 0xBC, 0x00, 0x00, 0x00, 0x3B, 0x5F, 0x0D
};
BYTE fire_callback0_bits[]=
{
	0x89, 0x4C, 0x24, 0x31, 0x8B, 0x4D, 0x00, 0x89, 0x54, 0x24, 0x2D, 0x8B, 0x54, 0x24, 0x20, 0x89, 0x4C, 0x24, 0x39, 0x8B, 0x4D, 0x08, 0x89, 0x54, 0x24, 0x35, 0x8B, 0x55, 0x04, 0x89, 0x4C, 0x24,
	0x41, 0x8B, 0x4E, 0x0C, 0xC0, 0xE8, 0x02, 0xC6, 0x44, 0x24, 0x2C, 0x0D, 0x89, 0x54, 0x24, 0x3D, 0x8B, 0x91, 0xBC, 0x00, 0x00, 0x00, 0x24, 0x03, 0x88, 0x44, 0x24, 0x4F, 0x33, 0xC0, 0x3B, 0xF8,
	0x89, 0x54, 0x24, 0x50, 0x75, 0x07, 0x66, 0x89, 0x44, 0x24, 0x4D, 0xEB, 0x0C, 0x66, 0x8B, 0x97, 0xA8, 0x00, 0x00, 0x00, 0x66, 0x89, 0x54, 0x24, 0x4D, 0x3B, 0xD8, 0x74, 0x07, 0x66, 0x8B, 0x83,
	0xA8, 0x00, 0x00, 0x00, 0x66, 0x8B, 0x56, 0x16, 0x66, 0x89, 0x44, 0x24, 0x4B, 0x66, 0x8B, 0x46, 0x18, 0x66, 0x89, 0x54, 0x24, 0x47, 0x66, 0x89, 0x44, 0x24, 0x49, 0x8B, 0x89, 0x11, 0x01, 0x00,
	0x00, 0x8A, 0x44, 0x24, 0x46, 0x8D, 0x54, 0x24, 0x2C, 0xC1, 0xE9, 0x1E, 0x32, 0xC8, 0x6A, 0x28, 0x80, 0xE1, 0x01, 0x52, 0x32, 0xC1, 0x88, 0x44, 0x24, 0x4E
};

BYTE fire_callback1_bits[]=
{
	0xC6, 0x44, 0x24, 0x18, 0x0D, 0x8B, 0x08, 0x89, 0x4C, 0x24, 0x19, 0x8B, 0x0B, 0x8B, 0x50, 0x04, 0x89, 0x4C, 0x24, 0x25, 0x89, 0x54, 0x24, 0x1D, 0x8B, 0x53, 0x04, 0x8B, 0x40, 0x08, 0x89, 0x54,
	0x24, 0x29, 0x8A, 0x56, 0x1B, 0x89, 0x44, 0x24, 0x21, 0x8B, 0x43, 0x08, 0x89, 0x44, 0x24, 0x2D, 0x8B, 0x46, 0x0C, 0xC0, 0xEA, 0x02, 0x8B, 0x88, 0xBC, 0x00, 0x00, 0x00, 0x80, 0xE2, 0x03, 0x89,
	0x4C, 0x24, 0x3C, 0x33, 0xC9, 0x3B, 0xF9, 0x88, 0x54, 0x24, 0x3B, 0x75, 0x07, 0x66, 0x89, 0x4C, 0x24, 0x39, 0xEB, 0x0C, 0x66, 0x8B, 0x97, 0xA8, 0x00, 0x00, 0x00, 0x66, 0x89, 0x54, 0x24, 0x39,
	0x3B, 0xE9, 0x74, 0x07, 0x66, 0x8B, 0x8D, 0xA8, 0x00, 0x00, 0x00, 0x66, 0x8B, 0x56, 0x16, 0x66, 0x89, 0x4C, 0x24, 0x37, 0x66, 0x8B, 0x4E, 0x18, 0x66, 0x89, 0x54, 0x24, 0x33, 0x66, 0x89, 0x4C,
	0x24, 0x35, 0x8B, 0x90, 0x11, 0x01, 0x00, 0x00, 0x8A, 0x44, 0x24, 0x32, 0x8B, 0x8F, 0x96, 0x00, 0x00, 0x00, 0xC1, 0xEA, 0x1E, 0x32, 0xD0, 0x6A, 0x28, 0x80, 0xE2, 0x01, 0x32, 0xC2, 0x88, 0x44,
	0x24, 0x36, 0x8B, 0x51, 0x04, 0x8D, 0x44, 0x24, 0x1C
};

BYTE fire_callback2_bits[]=
{
	0x89, 0x54, 0x24, 0x1D, 0x8B, 0x57, 0x04, 0x89, 0x44, 0x24, 0x21, 0x8B, 0x47, 0x08, 0x89, 0x54, 0x24, 0x29, 0x8A, 0x56, 0x1B, 0x89, 0x4C, 0x24, 0x19, 0x8B, 0x0F, 0x89, 0x44, 0x24, 0x2D, 0x8B,
	0x46, 0x0C, 0xC6, 0x44, 0x24, 0x18, 0x0D, 0xC0, 0xEA, 0x02, 0x89, 0x4C, 0x24, 0x25, 0x8B, 0x88, 0xBC, 0x00, 0x00, 0x00, 0x33, 0xFF, 0x80, 0xE2, 0x03, 0x3B, 0xDF, 0x89, 0x4C, 0x24, 0x3C, 0x88,
	0x54, 0x24, 0x3B, 0x75, 0x07, 0x66, 0x89, 0x7C, 0x24, 0x39, 0xEB, 0x0C, 0x66, 0x8B, 0x8B, 0xA8, 0x00, 0x00, 0x00, 0x66, 0x89, 0x4C, 0x24, 0x39, 0x3B, 0xEF, 0x75, 0x07, 0x66, 0x89, 0x7C, 0x24,
	0x37, 0xEB, 0x0C, 0x66, 0x8B, 0x95, 0xA8, 0x00, 0x00, 0x00, 0x66, 0x89, 0x54, 0x24, 0x37, 0x66, 0x8B, 0x4E, 0x16, 0x66, 0x8B, 0x56, 0x18, 0x66, 0x89, 0x4C, 0x24, 0x33, 0x66, 0x89, 0x54, 0x24,
	0x35, 0x8B, 0x88, 0x11, 0x01, 0x00, 0x00, 0x8A, 0x44, 0x24, 0x32, 0xC1, 0xE9, 0x1E, 0x32, 0xC8, 0x8D, 0x54, 0x24, 0x18, 0x80, 0xE1, 0x01, 0x6A, 0x28, 0x32, 0xC1, 0x52, 0x88, 0x44, 0x24, 0x3A,
};

BYTE fire_callback3_bits[]=
{
	0x89, 0x54, 0x24, 0x19, 0x8B, 0x54, 0x24, 0x50, 0x89, 0x44, 0x24, 0x1D, 0x89, 0x4C, 0x24, 0x21, 0xC6, 0x44, 0x24, 0x18, 0x0D, 0x8B, 0x02, 0x89, 0x44, 0x24, 0x25, 0x8B, 0x43, 0x0C, 0x8B, 0x4A,
	0x04, 0x89, 0x4C, 0x24, 0x29, 0x8B, 0x52, 0x08, 0x89, 0x54, 0x24, 0x2D, 0x8A, 0x53, 0x1B, 0x8B, 0x88, 0xBC, 0x00, 0x00, 0x00, 0xC0, 0xEA, 0x02, 0x80, 0xE2, 0x03, 0x3B, 0xFD, 0x89, 0x4C, 0x24,
	0x3C, 0x88, 0x54, 0x24, 0x3B, 0x75, 0x07, 0x66, 0x89, 0x6C, 0x24, 0x39, 0xEB, 0x0C, 0x66, 0x8B, 0x8F, 0xA8, 0x00, 0x00, 0x00, 0x66, 0x89, 0x4C, 0x24, 0x39, 0x8B, 0x4C, 0x24, 0x4C, 0x3B, 0xCD,
	0x75, 0x07, 0x66, 0x89, 0x6C, 0x24, 0x37, 0xEB, 0x0C, 0x66, 0x8B, 0x91, 0xA8, 0x00, 0x00, 0x00, 0x66, 0x89, 0x54, 0x24, 0x37, 0x66, 0x8B, 0x4B, 0x16, 0x66, 0x8B, 0x53, 0x18, 0x66, 0x89, 0x4C,
	0x24, 0x33, 0x66, 0x89, 0x54, 0x24, 0x35, 0x8B, 0x88, 0x11, 0x01, 0x00, 0x00, 0x8A, 0x44, 0x24, 0x32, 0xC1, 0xE9, 0x1E, 0x32, 0xC8, 0x8D, 0x54, 0x24, 0x18, 0x80, 0xE1, 0x01, 0x6A, 0x28, 0x32,
	0xC1, 0x52, 0x88, 0x44, 0x24, 0x3A
};

BYTE Send_FireWeapon_bits[]=
{
	0x83, 0xEC, 0x28, 0xF6, 0x80, 0x44, 0x2A, 0x00, 0x00, 0x01, 0x0F, 0x84, 0xCB, 0x00, 0x00, 0x00, 0x8B, 0x4C, 0x24, 0x38, 0xC6, 0x44, 0x24, 0x00, 0x0D, 0x56, 0x8B, 0x11, 0x89, 0x54, 0x24, 0x05,
	0x8B, 0x54, 0x24, 0x40, 0x8B, 0x41, 0x04, 0x89, 0x44, 0x24, 0x09, 0x8B, 0x02, 0x8B, 0x49, 0x08, 0x89, 0x44, 0x24, 0x11, 0x8B, 0x44, 0x24, 0x30, 0x89, 0x4C, 0x24, 0x0D, 0x8B, 0x4A, 0x04, 0x89,
	0x4C, 0x24, 0x15, 0x8B, 0x48, 0x0C, 0x8B, 0x52, 0x08, 0x89, 0x54, 0x24, 0x19, 0x8B, 0x91, 0xBC, 0x00, 0x00, 0x00, 0x89, 0x54, 0x24, 0x28, 0x8A, 0x50, 0x1B, 0xC0, 0xEA, 0x02, 0x80, 0xE2, 0x03,
	0x88, 0x54, 0x24, 0x27, 0x8B, 0x54, 0x24, 0x34, 0x85, 0xD2, 0x75, 0x07, 0x66, 0x89, 0x54, 0x24, 0x25, 0xEB, 0x0C, 0x66, 0x8B, 0xB2, 0xA8, 0x00, 0x00, 0x00, 0x66, 0x89, 0x74, 0x24, 0x25, 0x8B,
	0x74, 0x24, 0x38, 0x85, 0xF6, 0x75, 0x07, 0x66, 0x89, 0x74, 0x24, 0x23, 0xEB, 0x0C, 0x66, 0x8B, 0xB6, 0xA8, 0x00, 0x00, 0x00, 0x66, 0x89, 0x74, 0x24, 0x23, 0x66, 0x8B, 0x70, 0x16, 0x66, 0x8B,
	0x40, 0x18, 0x66, 0x89, 0x74, 0x24, 0x1F, 0x66, 0x89, 0x44, 0x24, 0x21, 0x8B, 0x89, 0x11, 0x01, 0x00, 0x00, 0x8A, 0x44, 0x24, 0x1E, 0xC1, 0xE9, 0x1E, 0x32, 0xC8, 0x6A, 0x28, 0x80, 0xE1, 0x01,
	0x32, 0xC1, 0x8B, 0x8A, 0x96, 0x00, 0x00, 0x00, 0x88, 0x44, 0x24, 0x22, 0x8D, 0x44, 0x24, 0x08, 0x8B, 0x51, 0x04, 0x50, 0x52, 0xE8, 0x61, 0x82, 0xFB, 0xFF, 0x5E, 0x83, 0xC4, 0x28
};

BYTE Send_MapWeapon_bits[]=
{
	0x83, 0xEC, 0x28, 0x8B, 0x81, 0xF3, 0x41, 0x01, 0x00, 0x53, 0x56, 0x33, 0xF6, 0x3D, 0x2C, 0x01, 0x00, 0x00, 0x57, 0x7D, 0x2D, 0x8B, 0xB1, 0xF7, 0x41, 0x01, 0x00, 0x8D, 0x14, 0x40, 0x8D, 0x14,
	0xD2, 0xC1, 0xE2, 0x02, 0x2B, 0xD0, 0x03, 0xF2, 0x40, 0x89, 0x81, 0xF3, 0x41, 0x01, 0x00, 0x66, 0x81, 0x66, 0x69, 0xFD, 0xFF, 0xC7, 0x46, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x0D, 0xE8, 0x1D,
	0x51, 0x00, 0x85, 0xF6, 0x75, 0x0B, 0x33, 0xC0, 0x5F, 0x5E, 0x5B, 0x83, 0xC4, 0x28, 0xC2, 0x10, 0x00, 0x8B, 0x81, 0x47, 0x8A, 0x03, 0x00, 0x8B, 0x7C, 0x24, 0x3C, 0x8B, 0x5C, 0x24, 0x38, 0x6A,
	0x00, 0x50, 0x6A, 0x00, 0x57, 0x53, 0x56, 0xE8, 0xBE, 0xE7, 0xFF, 0xFF, 0x83, 0xC6, 0x1C, 0x8B, 0x44, 0x24, 0x40, 0x8B, 0xC8, 0x8B, 0x11, 0x89, 0x16, 0x8B, 0x51, 0x04, 0x89, 0x56, 0x04, 0x8B,
	0x49, 0x08, 0x89, 0x4E, 0x08, 0x8B, 0x4C, 0x24, 0x44, 0x85, 0xC9, 0x74, 0x58, 0x8B, 0x15, 0xE8, 0x1D, 0x51, 0x00, 0x8B, 0x9B, 0xBC, 0x00, 0x00, 0x00, 0xF6, 0x82, 0x44, 0x2A, 0x00, 0x00, 0x01,
	0x74, 0x43, 0x8B, 0x0F, 0x8B, 0x57, 0x04, 0x89, 0x4C, 0x24, 0x0D, 0x8B, 0x4F, 0x08, 0x89, 0x54, 0x24, 0x11, 0x8B, 0x10, 0x89, 0x4C, 0x24, 0x15, 0x8B, 0x48, 0x04, 0x89, 0x54, 0x24, 0x19, 0x8B,
	0x50, 0x08, 0x8D, 0x44, 0x24, 0x0C, 0x6A, 0x28, 0x50, 0xC6, 0x44, 0x24, 0x14, 0x0D, 0x89, 0x4C, 0x24, 0x25, 0x89, 0x54, 0x24, 0x29, 0x89, 0x5C, 0x24, 0x38, 0xE8, 0xBB, 0x1D, 0xFB, 0xFF, 0x50,
	0xE8, 0xF5, 0x3D, 0xFB, 0xFF, 0x5F, 0x5E, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x5B, 0x83, 0xC4, 0x28
};

BYTE Set_Packetlen_bits[]=
{
	0xC7, 0x05, 0x0C, 0x2B, 0x51, 0x00, 0x28, 0x00, 0x00, 0x00, 0xA3, 0x54, 0x2A, 0x51, 0x00, 0xC7, 0x05, 0x10, 0x2B, 0x51, 0x00, 0x11, 0x00, 0x00, 0x00
};

unsigned int WeaponPacketAddressAry[WEAPONPACKETARYLEN]=
{
	0x49D27B,
	0x049A76C,
	0x049AFCB,
	0x49D7B5 ,
	0x049DAA2,

	0x049DC7D,
	0x49DE3E,
	0x0452117,
	0x499AB5,
	0x049DF16
	
};


DWORD WeaponPacketLenAry[WEAPONPACKETARYLEN]=
{
	sizeof( Receive_Weapon_bits),
	sizeof(	AreaOfDamage_bits),
	sizeof( Receive_AreaOfDamage_bits),
	sizeof( fire_callback0_bits),
	sizeof( fire_callback1_bits),

	sizeof( fire_callback2_bits),
	sizeof( fire_callback3_bits),
	sizeof( Set_Packetlen_bits),
	sizeof( Send_FireWeapon_bits),
	sizeof( Send_MapWeapon_bits)
	
};

LPBYTE WeaponPacketBitsAry[WEAPONPACKETARYLEN]=
{
	Receive_Weapon_bits,
	AreaOfDamage_bits,
	Receive_AreaOfDamage_bits,
	fire_callback0_bits,
	fire_callback1_bits,

	fire_callback2_bits,
	fire_callback3_bits,
	Set_Packetlen_bits,
	Send_FireWeapon_bits,
	Send_MapWeapon_bits
	
};


ModifyWeaponPacket::ModifyWeaponPacket ()
{
	ModifyRoutine ( FALSE);

	FeaturePacket ( FALSE);

	EnsureDplayx ( FALSE);
}

ModifyWeaponPacket::ModifyWeaponPacket (BOOL DoIt)
{
	ModifyRoutine ( DoIt);

	FeaturePacket ( DoIt);

	EnsureDplayx ( DoIt);
}

void ModifyWeaponPacket::ModifyRoutine (BOOL DoIt)
{
	for (int i= 0; i<WEAPONPACKETARYLEN; ++i)
	{
		WeaponPacketAryHook[i]= NULL;
	}

	DplayxWeaponPacketLen= NULL;
	DplayxAofDPacketLen= NULL;
	DplayxFeatureDestroyPacketLen= NULL;

	if (!DoIt)
	{
		return;
	}


	for (int i= 0; i<WEAPONPACKETARYLEN; ++i)
	{
		WeaponPacketAryHook[i]= new SingleHook ( (WeaponPacketAddressAry[i]), WeaponPacketLenAry[i], INLINE_UNPROTECTEVINMENT, WeaponPacketBitsAry[i]);
	}
}


void ModifyWeaponPacket::EnsureDplayx (BOOL DoIt)
{
	if (!DoIt)
	{
		return ;
	}
	// ugly hook dplayx's packet length at now 
	try 
	{
		/*
		546
		27B8C   C745 F0 24000000 MOV DWORD PTR SS:[EBP-10],24
		27BC8   C745 F0 0E000000 MOV DWORD PTR SS:[EBP-10],0E
		27BA4   C745 F0 06000000 MOV DWORD PTR SS:[EBP-10],6

		545
		1E09C   C745 F0 24000000 MOV DWORD PTR SS:[EBP-10],24
		1E0D8   C745 F0 0E000000 MOV DWORD PTR SS:[EBP-10],0E
		1E0B4   C745 F0 06000000 MOV DWORD PTR SS:[EBP-10],6
		
		99b
		1BCE8   BB 24000000      MOV EBX,24
		1BD1A   BB 0E000000      MOV EBX,0E
		1BCFC   BB 06000000      MOV EBX,6
		*/

		LPSTR DplayxDllName= reinterpret_cast<LPSTR> (0x004FF9E4);
		LPBYTE DplayHmodule= reinterpret_cast<LPBYTE>(GetModuleHandle ( DplayxDllName));
		BYTE _546_0[]= {0xC7, 0x45, 0xF0, 0x24, 0x00, 0x00, 0x00};
		BYTE _546_1[]= {0xC7, 0x45, 0xF0, 0x0E, 0x00, 0x00, 0x00};

		BYTE _99b_0[]= {0xBB, 0x24, 0x00, 0x00, 0x00};
		BYTE _99b_1[]= {0xBB, 0x0E, 0x00, 0x00, 0x00};
		

		if (NULL==DplayHmodule)
		{
			;
		}
		else if (0==memcmp ( &DplayHmodule[0x27B8C], _546_0, sizeof(_546_0)))
		{//565 version dplayx.dll
			*reinterpret_cast<DWORD *>(&_546_0[3])= 0x28;
			*reinterpret_cast<DWORD *>(&_546_1[3])= 0x11;

			DplayxWeaponPacketLen=  new SingleHook ( &DplayHmodule[0x27B8C], sizeof(_546_0), INLINE_UNPROTECTEVINMENT, _546_0);
			DplayxAofDPacketLen=  new SingleHook ( &DplayHmodule[0x27BC8], sizeof(_546_1), INLINE_UNPROTECTEVINMENT, _546_1);

			*reinterpret_cast<DWORD *>(&_546_1[3])= 0x8;
			DplayxFeatureDestroyPacketLen=  new SingleHook ( &DplayHmodule[0x27BA4], sizeof(_546_1), INLINE_UNPROTECTEVINMENT, _546_1);
		}
		else if (0==memcmp ( &DplayHmodule[0x1E09C], _546_0, sizeof(_546_0)))
		{
			*reinterpret_cast<DWORD *>(&_546_0[3])= 0x28;
			*reinterpret_cast<DWORD *>(&_546_1[3])= 0x11;

			DplayxWeaponPacketLen=  new SingleHook ( &DplayHmodule[0x1E09C], sizeof(_546_0), INLINE_UNPROTECTEVINMENT, _546_0);
			DplayxAofDPacketLen=  new SingleHook ( &DplayHmodule[0x1E0D8], sizeof(_546_1), INLINE_UNPROTECTEVINMENT, _546_1);

			*reinterpret_cast<DWORD *>(&_546_1[3])= 0x8;
			
			DplayxFeatureDestroyPacketLen=  new SingleHook ( &DplayHmodule[0x1E0B4], sizeof(_546_1), INLINE_UNPROTECTEVINMENT, _546_1);
		}
		else if (0==memcmp ( &DplayHmodule[0x1BCE8], _99b_0, sizeof(_99b_0)))
		{
			*reinterpret_cast<DWORD *>(&_99b_0[1])= 0x28;
			*reinterpret_cast<DWORD *>(&_99b_1[1])= 0x11;

			DplayxWeaponPacketLen=  new SingleHook ( &DplayHmodule[0x1BCE8], sizeof(_99b_0), INLINE_UNPROTECTEVINMENT, _99b_0);
			DplayxAofDPacketLen=  new SingleHook ( &DplayHmodule[0x1BD1A], sizeof(_99b_1), INLINE_UNPROTECTEVINMENT, _99b_1);
			*reinterpret_cast<DWORD *>(&_99b_1[1])= 0x8;
			DplayxFeatureDestroyPacketLen= new SingleHook ( &DplayHmodule[0x1BCFC], sizeof(_99b_1), INLINE_UNPROTECTEVINMENT, _99b_1);
		}
	}
	catch (...)
	{
		//error happen in patch dplayx, stop!
		;
	}
}
/*
net bugs

feature weapon
bug 13 0x42398A 6 ~ mdf
bug 1  42454B  6 ~ mdf
bug 18 042462D 6 ~ mdf
bug 19 042465F 6 ~ mdf
bug 17 42458C  6 ~ mdf
bug 16 455453  6 ~ mdf
bug 22 0x423522 6 ~ mdf

bug 15 424682  6 ~ sgl 
bug 14 0423516 6 ~ sgl
bug 20 0424544 6 ~ sgl
bug 21 04239A0 6 ~ sgl


feature packet size
bug 20 452135  6 ~ mdf


//00424672   807C24 16 FC     CMP BYTE PTR SS:[ESP+16],0FC



*/


//0x42398A
BYTE FeaturePckt0_bits[]= {0x66, 0xC7, 0x44, 0x24, 0x16, 0xFF, 0x00};
//0x42454B
BYTE FeaturePckt1_bits[]= {0x8B, 0x82, 0xBC, 0x00, 0x00, 0x00, 0x66, 0x8B, 0x54, 0x24, 0x28, 0x66, 0x89, 0x44, 0x24, 0x1A};
//042462D
//042465F
BYTE FeaturePckt2_bits[]= {0x66, 0xC7, 0x44, 0x24, 0x16, 0xFD, 0x00};
//42458C
BYTE FeaturePckt3_bits[]= {0x66, 0xC7, 0x44, 0x24, 0x16, 0xFC, 0x00};

//455453
BYTE FeaturePckt4_bits[]= {0x66, 0x8B, 0x4F, 0x06};

//452135
BYTE FeaturePckt5_bits[]= {0xC7, 0x05, 0x14, 0x2B, 0x51, 0x00, 0x08, 0x00, 0x00, 0x00};

//0x423522
BYTE FeaturePckt6_bits[]= {0x66, 0xC7, 0x44, 0x24, 0x1E, 0xFE, 0x00};

//0x0424672
BYTE FeaturePckt7_bits[]= {0x80, 0x7C, 0x24 , 0x16 , 0xFC};


LPBYTE FeaturePacket_mdf_bits[FEATUREPACKET_MDFARYLEN]=
{
	FeaturePckt0_bits,
	FeaturePckt1_bits, 
	FeaturePckt2_bits,
	FeaturePckt2_bits,

	FeaturePckt3_bits,
	FeaturePckt4_bits,
	FeaturePckt5_bits,
	FeaturePckt6_bits,

	FeaturePckt7_bits
};


DWORD FeaturePacket_mdf_bits_len[FEATUREPACKET_MDFARYLEN]=
{
	sizeof(FeaturePckt0_bits),
	sizeof(FeaturePckt1_bits), 
	sizeof(FeaturePckt2_bits),
	sizeof(FeaturePckt2_bits),

	sizeof(FeaturePckt3_bits),
	sizeof(FeaturePckt4_bits),
	sizeof(FeaturePckt5_bits),
	sizeof(FeaturePckt6_bits),

	sizeof(FeaturePckt7_bits)
};

DWORD FeaturePacket_mdf_maxlen[FEATUREPACKET_MDFARYLEN]=
{
	0x5,
	0xf, 
	0x5,
	0x5,

	0x5,
	0x5,
	0x6,
	0x5,

	0x5
};

DWORD FeaturePacket_mdf_off[FEATUREPACKET_MDFARYLEN]=
{
	0x5,
	0xf,
	0x5,
	0x5,

	0x5,
	0x3,
	0x6,
	0x5,

	0x5
};

DWORD FeaturePacke_mdf_addr[FEATUREPACKET_MDFARYLEN]=
{
	0x42398A,
	0x42454B,
	0x042462D,
	0x042465F,

	0x42458C,
	0x455453,
	0x452135,
	0x423522,

	0x0424672
};



//424682
//0042351A 
//0424544
//4239A0
DWORD FeaturePacketAddressAry[FEATUREPACKET_SGLARYLEN]=
{
	0x424682,
	0x0042351A,
	0x0424544,
	0x4239A0
};

BYTE PushFeaturePacketSize_bits[]= {0x6A, 0x08};

void ModifyWeaponPacket::FeaturePacket (BOOL DoIt)
{
	for (int i= 0; i<FEATUREPACKET_MDFARYLEN; ++i)
	{
		FeaturePacket_mdf_ary[i]= NULL;
	}

	for (int i= 0; i<FEATUREPACKET_SGLARYLEN; ++i)
	{
		FeaturePacketSize_sgl_ary[i]= NULL;
	}

	if (!DoIt)
	{
		return;
	}

	for (int i= 0; i<FEATUREPACKET_MDFARYLEN; ++i)
	{
		FeaturePacket_mdf_ary[i]= new ModifyHook ( reinterpret_cast<LPBYTE>(FeaturePacke_mdf_addr[i]), INLINE_MODIFYCODE,
			FeaturePacket_mdf_maxlen[i], 
			FeaturePacket_mdf_bits[i], FeaturePacket_mdf_bits_len[i], 
			FeaturePacket_mdf_off[i]);
	}

	for (int i= 0; i<FEATUREPACKET_SGLARYLEN; ++i)
	{
		FeaturePacketSize_sgl_ary[i]= new SingleHook ( (FeaturePacketAddressAry[i]), sizeof(PushFeaturePacketSize_bits), INLINE_UNPROTECTEVINMENT, PushFeaturePacketSize_bits);
	}
}

ModifyWeaponPacket::~ModifyWeaponPacket ()
{
	for (int i= 0; i<WEAPONPACKETARYLEN; ++i)
	{
		if (NULL!=WeaponPacketAryHook[i])
		{
			delete WeaponPacketAryHook[i];
		}
	}

	//feature packet
	for (int i= 0; i<FEATUREPACKET_MDFARYLEN; ++i)
	{
		if (NULL!=FeaturePacket_mdf_ary[i])
		{
			delete FeaturePacket_mdf_ary[i];
		}
	}

	for (int i= 0; i<FEATUREPACKET_SGLARYLEN; ++i)
	{
		if (NULL!=FeaturePacketSize_sgl_ary[i])
		{
			delete FeaturePacketSize_sgl_ary[i];
		}
	}

	/// ugly hook dplayx
	if (NULL!=DplayxAofDPacketLen)
	{
		delete DplayxAofDPacketLen;
	}
	if (NULL!=DplayxWeaponPacketLen)
	{
		delete DplayxWeaponPacketLen;
	} 
	if (NULL!=DplayxFeatureDestroyPacketLen)
	{
		delete DplayxFeatureDestroyPacketLen;
	} 
}
